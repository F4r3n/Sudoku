#![feature(test)]

extern crate test;
use test::Bencher;

mod lib;
use crate::lib::{solve_sudoku, generate_random_grid, generate};



#[bench]
fn generate_all(b: &mut Bencher) {

    let grid: Vec::<u8> = vec![
        0,1,0, 3,0,9, 0,0,0,
        4,7,0, 1,5,0, 0,0,0,
        3,0,5, 0,0,0, 0,0,0,
 
        6,0,8, 4,1,7, 5,3,2,
        1,2,0, 9,0,0, 8,6,7,
        5,3,7, 6,0,2, 9,4,1,
 
        0,6,2, 7,9,0, 1,0,4,
        0,0,0, 8,0,0, 0,0,3,
        0,0,0, 0,0,1, 2,0,8,
    ];

    b.iter(|| {
        solve_sudoku(grid.clone(), false);
    });    
}

fn main() {
    let grid = vec![
        0,0,0, 0,0,0, 0,0,0,
        0,0,0, 3,0,0, 0,0,0,
        0,0,0, 0,9,7, 1,0,0,
 
        0,0,0, 0,0,0, 0,0,0,
        0,0,0, 0,5,0, 0,6,0,
        0,0,0, 0,0,0, 0,0,0,
 
        0,0,0, 0,6,0, 0,0,0,
        0,0,0, 0,0,0, 0,0,5,
        4,0,0, 0,0,0, 0,0,9,
    ];

    let grid = vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 9, 2, 3, 6, 1, 4, 5, 3, 2, 5, 6, 8, 9, 4, 7, 1, 4, 6, 8, 3, 1, 7, 2, 5, 9, 9, 1, 7, 5, 2, 4, 3, 6, 8, 5, 7, 2, 9, 4, 3, 8, 1, 6, 6, 3, 1, 8, 5, 2, 7, 9, 4, 8, 9, 4, 7, 6, 1, 5, 3, 2
    ];
    assert!(grid.len() == 81);
    //let (done, final_grid) = solve_sudoku(grid.to_vec());
    print!("{:?}", generate(4));

}